// Generated by Dagger (https://dagger.dev).
package com.karsoft.effectivemobile.di;

import com.karsoft.effectivemobile.domain.repository.TicketOfferRepository;
import com.karsoft.effectivemobile.domain.usecase.TicketOfferUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DomainModule_BindTicketOfferUseCaseFactory implements Factory<TicketOfferUseCase> {
  private final Provider<TicketOfferRepository> repoProvider;

  public DomainModule_BindTicketOfferUseCaseFactory(Provider<TicketOfferRepository> repoProvider) {
    this.repoProvider = repoProvider;
  }

  @Override
  public TicketOfferUseCase get() {
    return bindTicketOfferUseCase(repoProvider.get());
  }

  public static DomainModule_BindTicketOfferUseCaseFactory create(
      Provider<TicketOfferRepository> repoProvider) {
    return new DomainModule_BindTicketOfferUseCaseFactory(repoProvider);
  }

  public static TicketOfferUseCase bindTicketOfferUseCase(TicketOfferRepository repo) {
    return Preconditions.checkNotNullFromProvides(DomainModule.INSTANCE.bindTicketOfferUseCase(repo));
  }
}
