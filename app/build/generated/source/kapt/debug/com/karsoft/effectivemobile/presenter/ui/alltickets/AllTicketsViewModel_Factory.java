// Generated by Dagger (https://dagger.dev).
package com.karsoft.effectivemobile.presenter.ui.alltickets;

import com.karsoft.effectivemobile.domain.mapper.base.Mapper;
import com.karsoft.effectivemobile.domain.models.Ticket;
import com.karsoft.effectivemobile.domain.usecase.TicketUseCase;
import com.karsoft.effectivemobile.presenter.models.TicketUI;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AllTicketsViewModel_Factory implements Factory<AllTicketsViewModel> {
  private final Provider<TicketUseCase> ticketUseCaseProvider;

  private final Provider<Mapper<Ticket, TicketUI>> ticketMapperProvider;

  public AllTicketsViewModel_Factory(Provider<TicketUseCase> ticketUseCaseProvider,
      Provider<Mapper<Ticket, TicketUI>> ticketMapperProvider) {
    this.ticketUseCaseProvider = ticketUseCaseProvider;
    this.ticketMapperProvider = ticketMapperProvider;
  }

  @Override
  public AllTicketsViewModel get() {
    return newInstance(ticketUseCaseProvider.get(), ticketMapperProvider.get());
  }

  public static AllTicketsViewModel_Factory create(Provider<TicketUseCase> ticketUseCaseProvider,
      Provider<Mapper<Ticket, TicketUI>> ticketMapperProvider) {
    return new AllTicketsViewModel_Factory(ticketUseCaseProvider, ticketMapperProvider);
  }

  public static AllTicketsViewModel newInstance(TicketUseCase ticketUseCase,
      Mapper<Ticket, TicketUI> ticketMapper) {
    return new AllTicketsViewModel(ticketUseCase, ticketMapper);
  }
}
