// Generated by Dagger (https://dagger.dev).
package com.karsoft.effectivemobile.presenter.ui.alltickets;

import com.karsoft.effectivemobile.domain.mapper.base.Mapper;
import com.karsoft.effectivemobile.domain.models.Ticket;
import com.karsoft.effectivemobile.domain.usecase.TicketUseCase;
import com.karsoft.effectivemobile.presenter.models.TicketUI;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AllTicketsViewModel_Factory implements Factory<AllTicketsViewModel> {
  private final Provider<TicketUseCase> useCaseProvider;

  private final Provider<Mapper<Ticket, TicketUI>> mapperProvider;

  public AllTicketsViewModel_Factory(Provider<TicketUseCase> useCaseProvider,
      Provider<Mapper<Ticket, TicketUI>> mapperProvider) {
    this.useCaseProvider = useCaseProvider;
    this.mapperProvider = mapperProvider;
  }

  @Override
  public AllTicketsViewModel get() {
    return newInstance(useCaseProvider.get(), mapperProvider.get());
  }

  public static AllTicketsViewModel_Factory create(Provider<TicketUseCase> useCaseProvider,
      Provider<Mapper<Ticket, TicketUI>> mapperProvider) {
    return new AllTicketsViewModel_Factory(useCaseProvider, mapperProvider);
  }

  public static AllTicketsViewModel newInstance(TicketUseCase useCase,
      Mapper<Ticket, TicketUI> mapper) {
    return new AllTicketsViewModel(useCase, mapper);
  }
}
