// Generated by Dagger (https://dagger.dev).
package com.karsoft.effectivemobile.di;

import com.karsoft.effectivemobile.domain.repository.OfferRepository;
import com.karsoft.effectivemobile.domain.usecase.OfferUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DomainModule_ProvideOfferUseCaseFactory implements Factory<OfferUseCase> {
  private final Provider<OfferRepository> offerRepositoryProvider;

  public DomainModule_ProvideOfferUseCaseFactory(
      Provider<OfferRepository> offerRepositoryProvider) {
    this.offerRepositoryProvider = offerRepositoryProvider;
  }

  @Override
  public OfferUseCase get() {
    return provideOfferUseCase(offerRepositoryProvider.get());
  }

  public static DomainModule_ProvideOfferUseCaseFactory create(
      Provider<OfferRepository> offerRepositoryProvider) {
    return new DomainModule_ProvideOfferUseCaseFactory(offerRepositoryProvider);
  }

  public static OfferUseCase provideOfferUseCase(OfferRepository offerRepository) {
    return Preconditions.checkNotNullFromProvides(DomainModule.INSTANCE.provideOfferUseCase(offerRepository));
  }
}
