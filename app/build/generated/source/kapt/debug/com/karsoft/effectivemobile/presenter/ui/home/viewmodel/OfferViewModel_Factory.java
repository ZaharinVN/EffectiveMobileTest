// Generated by Dagger (https://dagger.dev).
package com.karsoft.effectivemobile.presenter.ui.home.viewmodel;

import com.karsoft.effectivemobile.domain.mapper.base.Mapper;
import com.karsoft.effectivemobile.domain.models.Offer;
import com.karsoft.effectivemobile.domain.usecase.OfferUseCase;
import com.karsoft.effectivemobile.presenter.models.OfferUI;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class OfferViewModel_Factory implements Factory<OfferViewModel> {
  private final Provider<OfferUseCase> offerUseCaseProvider;

  private final Provider<Mapper<Offer, OfferUI>> offerMapperProvider;

  public OfferViewModel_Factory(Provider<OfferUseCase> offerUseCaseProvider,
      Provider<Mapper<Offer, OfferUI>> offerMapperProvider) {
    this.offerUseCaseProvider = offerUseCaseProvider;
    this.offerMapperProvider = offerMapperProvider;
  }

  @Override
  public OfferViewModel get() {
    return newInstance(offerUseCaseProvider.get(), offerMapperProvider.get());
  }

  public static OfferViewModel_Factory create(Provider<OfferUseCase> offerUseCaseProvider,
      Provider<Mapper<Offer, OfferUI>> offerMapperProvider) {
    return new OfferViewModel_Factory(offerUseCaseProvider, offerMapperProvider);
  }

  public static OfferViewModel newInstance(OfferUseCase offerUseCase,
      Mapper<Offer, OfferUI> offerMapper) {
    return new OfferViewModel(offerUseCase, offerMapper);
  }
}
