// Generated by Dagger (https://dagger.dev).
package com.karsoft.effectivemobile.presenter.ui.home.viewmodel;

import com.karsoft.effectivemobile.domain.mapper.base.Mapper;
import com.karsoft.effectivemobile.domain.models.Offer;
import com.karsoft.effectivemobile.domain.usecase.OfferUseCase;
import com.karsoft.effectivemobile.presenter.models.OfferUI;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class OfferViewModel_Factory implements Factory<OfferViewModel> {
  private final Provider<OfferUseCase> useCaseProvider;

  private final Provider<Mapper<Offer, OfferUI>> mapperProvider;

  public OfferViewModel_Factory(Provider<OfferUseCase> useCaseProvider,
      Provider<Mapper<Offer, OfferUI>> mapperProvider) {
    this.useCaseProvider = useCaseProvider;
    this.mapperProvider = mapperProvider;
  }

  @Override
  public OfferViewModel get() {
    return newInstance(useCaseProvider.get(), mapperProvider.get());
  }

  public static OfferViewModel_Factory create(Provider<OfferUseCase> useCaseProvider,
      Provider<Mapper<Offer, OfferUI>> mapperProvider) {
    return new OfferViewModel_Factory(useCaseProvider, mapperProvider);
  }

  public static OfferViewModel newInstance(OfferUseCase useCase, Mapper<Offer, OfferUI> mapper) {
    return new OfferViewModel(useCase, mapper);
  }
}
