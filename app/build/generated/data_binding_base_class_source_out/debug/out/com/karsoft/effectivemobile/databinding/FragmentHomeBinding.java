// Generated by view binder compiler. Do not edit!
package com.karsoft.effectivemobile.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.karsoft.effectivemobile.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentHomeBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ImageView btnBack;

  @NonNull
  public final MaterialButton btnShowAllTickets;

  @NonNull
  public final EditText etFromWhereFirstScreen;

  @NonNull
  public final EditText etWhereFromSecondScreen;

  @NonNull
  public final EditText etWhereSecondScreen;

  @NonNull
  public final HorizontalScrollView horizontalScrollView;

  @NonNull
  public final ImageView icSearch;

  @NonNull
  public final ImageView ivClear;

  @NonNull
  public final ImageView ivExchange;

  @NonNull
  public final ImageView ivNextBlue;

  @NonNull
  public final ImageView ivNextRed;

  @NonNull
  public final ImageView ivNextWhite;

  @NonNull
  public final ImageView ivRectangleBlue;

  @NonNull
  public final ImageView ivRectangleRed;

  @NonNull
  public final ImageView ivRectangleWhite;

  @NonNull
  public final ConstraintLayout layoutSearch;

  @NonNull
  public final LinearLayout llCalendarBack;

  @NonNull
  public final LinearLayout llCardSearch;

  @NonNull
  public final ConstraintLayout llFirst;

  @NonNull
  public final ConstraintLayout llSecond;

  @NonNull
  public final LinearLayout llStraightRails;

  @NonNull
  public final RecyclerView rvOffers;

  @NonNull
  public final TextView searchChipTickets;

  @NonNull
  public final TextView tvCurrentDate;

  @NonNull
  public final TextView tvFlyMusically;

  @NonNull
  public final TextView tvNameOfAviacompanyBlue;

  @NonNull
  public final TextView tvNameOfAviacompanyRed;

  @NonNull
  public final TextView tvNameOfAviacompanyWhite;

  @NonNull
  public final TextView tvPriceBlue;

  @NonNull
  public final TextView tvPriceRed;

  @NonNull
  public final TextView tvPriceWhite;

  @NonNull
  public final TextView tvTimeBack;

  @NonNull
  public final TextView tvTimesBlue;

  @NonNull
  public final TextView tvTimesRed;

  @NonNull
  public final TextView tvTimesWhite;

  @NonNull
  public final TextView tvTipWhere;

  @NonNull
  public final View viewLine;

  @NonNull
  public final View viewLine2;

  private FragmentHomeBinding(@NonNull RelativeLayout rootView, @NonNull ImageView btnBack,
      @NonNull MaterialButton btnShowAllTickets, @NonNull EditText etFromWhereFirstScreen,
      @NonNull EditText etWhereFromSecondScreen, @NonNull EditText etWhereSecondScreen,
      @NonNull HorizontalScrollView horizontalScrollView, @NonNull ImageView icSearch,
      @NonNull ImageView ivClear, @NonNull ImageView ivExchange, @NonNull ImageView ivNextBlue,
      @NonNull ImageView ivNextRed, @NonNull ImageView ivNextWhite,
      @NonNull ImageView ivRectangleBlue, @NonNull ImageView ivRectangleRed,
      @NonNull ImageView ivRectangleWhite, @NonNull ConstraintLayout layoutSearch,
      @NonNull LinearLayout llCalendarBack, @NonNull LinearLayout llCardSearch,
      @NonNull ConstraintLayout llFirst, @NonNull ConstraintLayout llSecond,
      @NonNull LinearLayout llStraightRails, @NonNull RecyclerView rvOffers,
      @NonNull TextView searchChipTickets, @NonNull TextView tvCurrentDate,
      @NonNull TextView tvFlyMusically, @NonNull TextView tvNameOfAviacompanyBlue,
      @NonNull TextView tvNameOfAviacompanyRed, @NonNull TextView tvNameOfAviacompanyWhite,
      @NonNull TextView tvPriceBlue, @NonNull TextView tvPriceRed, @NonNull TextView tvPriceWhite,
      @NonNull TextView tvTimeBack, @NonNull TextView tvTimesBlue, @NonNull TextView tvTimesRed,
      @NonNull TextView tvTimesWhite, @NonNull TextView tvTipWhere, @NonNull View viewLine,
      @NonNull View viewLine2) {
    this.rootView = rootView;
    this.btnBack = btnBack;
    this.btnShowAllTickets = btnShowAllTickets;
    this.etFromWhereFirstScreen = etFromWhereFirstScreen;
    this.etWhereFromSecondScreen = etWhereFromSecondScreen;
    this.etWhereSecondScreen = etWhereSecondScreen;
    this.horizontalScrollView = horizontalScrollView;
    this.icSearch = icSearch;
    this.ivClear = ivClear;
    this.ivExchange = ivExchange;
    this.ivNextBlue = ivNextBlue;
    this.ivNextRed = ivNextRed;
    this.ivNextWhite = ivNextWhite;
    this.ivRectangleBlue = ivRectangleBlue;
    this.ivRectangleRed = ivRectangleRed;
    this.ivRectangleWhite = ivRectangleWhite;
    this.layoutSearch = layoutSearch;
    this.llCalendarBack = llCalendarBack;
    this.llCardSearch = llCardSearch;
    this.llFirst = llFirst;
    this.llSecond = llSecond;
    this.llStraightRails = llStraightRails;
    this.rvOffers = rvOffers;
    this.searchChipTickets = searchChipTickets;
    this.tvCurrentDate = tvCurrentDate;
    this.tvFlyMusically = tvFlyMusically;
    this.tvNameOfAviacompanyBlue = tvNameOfAviacompanyBlue;
    this.tvNameOfAviacompanyRed = tvNameOfAviacompanyRed;
    this.tvNameOfAviacompanyWhite = tvNameOfAviacompanyWhite;
    this.tvPriceBlue = tvPriceBlue;
    this.tvPriceRed = tvPriceRed;
    this.tvPriceWhite = tvPriceWhite;
    this.tvTimeBack = tvTimeBack;
    this.tvTimesBlue = tvTimesBlue;
    this.tvTimesRed = tvTimesRed;
    this.tvTimesWhite = tvTimesWhite;
    this.tvTipWhere = tvTipWhere;
    this.viewLine = viewLine;
    this.viewLine2 = viewLine2;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_home, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentHomeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_back;
      ImageView btnBack = ViewBindings.findChildViewById(rootView, id);
      if (btnBack == null) {
        break missingId;
      }

      id = R.id.btn_show_all_tickets;
      MaterialButton btnShowAllTickets = ViewBindings.findChildViewById(rootView, id);
      if (btnShowAllTickets == null) {
        break missingId;
      }

      id = R.id.et_from_where_first_screen;
      EditText etFromWhereFirstScreen = ViewBindings.findChildViewById(rootView, id);
      if (etFromWhereFirstScreen == null) {
        break missingId;
      }

      id = R.id.et_where_from_second_screen;
      EditText etWhereFromSecondScreen = ViewBindings.findChildViewById(rootView, id);
      if (etWhereFromSecondScreen == null) {
        break missingId;
      }

      id = R.id.et_where_second_screen;
      EditText etWhereSecondScreen = ViewBindings.findChildViewById(rootView, id);
      if (etWhereSecondScreen == null) {
        break missingId;
      }

      id = R.id.horizontal_scroll_view;
      HorizontalScrollView horizontalScrollView = ViewBindings.findChildViewById(rootView, id);
      if (horizontalScrollView == null) {
        break missingId;
      }

      id = R.id.ic_search;
      ImageView icSearch = ViewBindings.findChildViewById(rootView, id);
      if (icSearch == null) {
        break missingId;
      }

      id = R.id.iv_clear;
      ImageView ivClear = ViewBindings.findChildViewById(rootView, id);
      if (ivClear == null) {
        break missingId;
      }

      id = R.id.iv_exchange;
      ImageView ivExchange = ViewBindings.findChildViewById(rootView, id);
      if (ivExchange == null) {
        break missingId;
      }

      id = R.id.iv_next_blue;
      ImageView ivNextBlue = ViewBindings.findChildViewById(rootView, id);
      if (ivNextBlue == null) {
        break missingId;
      }

      id = R.id.iv_next_red;
      ImageView ivNextRed = ViewBindings.findChildViewById(rootView, id);
      if (ivNextRed == null) {
        break missingId;
      }

      id = R.id.iv_next_white;
      ImageView ivNextWhite = ViewBindings.findChildViewById(rootView, id);
      if (ivNextWhite == null) {
        break missingId;
      }

      id = R.id.iv_rectangle_blue;
      ImageView ivRectangleBlue = ViewBindings.findChildViewById(rootView, id);
      if (ivRectangleBlue == null) {
        break missingId;
      }

      id = R.id.iv_rectangle_red;
      ImageView ivRectangleRed = ViewBindings.findChildViewById(rootView, id);
      if (ivRectangleRed == null) {
        break missingId;
      }

      id = R.id.iv_rectangle_white;
      ImageView ivRectangleWhite = ViewBindings.findChildViewById(rootView, id);
      if (ivRectangleWhite == null) {
        break missingId;
      }

      id = R.id.layout_search;
      ConstraintLayout layoutSearch = ViewBindings.findChildViewById(rootView, id);
      if (layoutSearch == null) {
        break missingId;
      }

      id = R.id.ll_calendar_back;
      LinearLayout llCalendarBack = ViewBindings.findChildViewById(rootView, id);
      if (llCalendarBack == null) {
        break missingId;
      }

      id = R.id.ll_card_search;
      LinearLayout llCardSearch = ViewBindings.findChildViewById(rootView, id);
      if (llCardSearch == null) {
        break missingId;
      }

      id = R.id.ll_first;
      ConstraintLayout llFirst = ViewBindings.findChildViewById(rootView, id);
      if (llFirst == null) {
        break missingId;
      }

      id = R.id.ll_second;
      ConstraintLayout llSecond = ViewBindings.findChildViewById(rootView, id);
      if (llSecond == null) {
        break missingId;
      }

      id = R.id.ll_straight_rails;
      LinearLayout llStraightRails = ViewBindings.findChildViewById(rootView, id);
      if (llStraightRails == null) {
        break missingId;
      }

      id = R.id.rv_offers;
      RecyclerView rvOffers = ViewBindings.findChildViewById(rootView, id);
      if (rvOffers == null) {
        break missingId;
      }

      id = R.id.search_chip_tickets;
      TextView searchChipTickets = ViewBindings.findChildViewById(rootView, id);
      if (searchChipTickets == null) {
        break missingId;
      }

      id = R.id.tv_current_date;
      TextView tvCurrentDate = ViewBindings.findChildViewById(rootView, id);
      if (tvCurrentDate == null) {
        break missingId;
      }

      id = R.id.tv_fly_musically;
      TextView tvFlyMusically = ViewBindings.findChildViewById(rootView, id);
      if (tvFlyMusically == null) {
        break missingId;
      }

      id = R.id.tv_name_of_aviacompany_blue;
      TextView tvNameOfAviacompanyBlue = ViewBindings.findChildViewById(rootView, id);
      if (tvNameOfAviacompanyBlue == null) {
        break missingId;
      }

      id = R.id.tv_name_of_aviacompany_red;
      TextView tvNameOfAviacompanyRed = ViewBindings.findChildViewById(rootView, id);
      if (tvNameOfAviacompanyRed == null) {
        break missingId;
      }

      id = R.id.tv_name_of_aviacompany_white;
      TextView tvNameOfAviacompanyWhite = ViewBindings.findChildViewById(rootView, id);
      if (tvNameOfAviacompanyWhite == null) {
        break missingId;
      }

      id = R.id.tv_price_blue;
      TextView tvPriceBlue = ViewBindings.findChildViewById(rootView, id);
      if (tvPriceBlue == null) {
        break missingId;
      }

      id = R.id.tv_price_red;
      TextView tvPriceRed = ViewBindings.findChildViewById(rootView, id);
      if (tvPriceRed == null) {
        break missingId;
      }

      id = R.id.tv_price_white;
      TextView tvPriceWhite = ViewBindings.findChildViewById(rootView, id);
      if (tvPriceWhite == null) {
        break missingId;
      }

      id = R.id.tv_time_back;
      TextView tvTimeBack = ViewBindings.findChildViewById(rootView, id);
      if (tvTimeBack == null) {
        break missingId;
      }

      id = R.id.tv_times_blue;
      TextView tvTimesBlue = ViewBindings.findChildViewById(rootView, id);
      if (tvTimesBlue == null) {
        break missingId;
      }

      id = R.id.tv_times_red;
      TextView tvTimesRed = ViewBindings.findChildViewById(rootView, id);
      if (tvTimesRed == null) {
        break missingId;
      }

      id = R.id.tv_times_white;
      TextView tvTimesWhite = ViewBindings.findChildViewById(rootView, id);
      if (tvTimesWhite == null) {
        break missingId;
      }

      id = R.id.tv_tip_where;
      TextView tvTipWhere = ViewBindings.findChildViewById(rootView, id);
      if (tvTipWhere == null) {
        break missingId;
      }

      id = R.id.view_line;
      View viewLine = ViewBindings.findChildViewById(rootView, id);
      if (viewLine == null) {
        break missingId;
      }

      id = R.id.view_line_2;
      View viewLine2 = ViewBindings.findChildViewById(rootView, id);
      if (viewLine2 == null) {
        break missingId;
      }

      return new FragmentHomeBinding((RelativeLayout) rootView, btnBack, btnShowAllTickets,
          etFromWhereFirstScreen, etWhereFromSecondScreen, etWhereSecondScreen,
          horizontalScrollView, icSearch, ivClear, ivExchange, ivNextBlue, ivNextRed, ivNextWhite,
          ivRectangleBlue, ivRectangleRed, ivRectangleWhite, layoutSearch, llCalendarBack,
          llCardSearch, llFirst, llSecond, llStraightRails, rvOffers, searchChipTickets,
          tvCurrentDate, tvFlyMusically, tvNameOfAviacompanyBlue, tvNameOfAviacompanyRed,
          tvNameOfAviacompanyWhite, tvPriceBlue, tvPriceRed, tvPriceWhite, tvTimeBack, tvTimesBlue,
          tvTimesRed, tvTimesWhite, tvTipWhere, viewLine, viewLine2);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
